{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def web_count():    \n",
    "    #匯入\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import re\n",
    "    behav = pd.read_csv(\"C:/Users/user/Desktop/competition/TBN_CUST_BEHAVIOR.csv\")\n",
    "    #處理月份\n",
    "    behav[\"month\"] = \"0\"\n",
    "    months = [\"M1\",\"M2\",\"M3\",\"M4\"]\n",
    "    date = [9447,9447+31,9447+61,9447+91,9568]\n",
    "    behav[\"month\"] = pd.cut(behav['VISITDATE'],date,right = False,labels=months)\n",
    "    \n",
    "    #正規表示式切割網址\n",
    "    i = 0\n",
    "    page_arr = np.array(behav[\"PAGE\"])\n",
    "    page_min = np.empty(len(behav[\"PAGE\"]),dtype = np.str)\n",
    "    behav_min = behav.copy()\n",
    "    del behav_min[\"PAGE\"]\n",
    "    for page in page_arr:\n",
    "        try:\n",
    "            re_page = re.compile(r\"tw(\\/.+?\\/.+?\\/)\")\n",
    "            match = re_page.search(page)\n",
    "            page_arr[i] = match.group(1)\n",
    "        except:\n",
    "            re_page = re.compile(r\"tw(\\/.+?\\/.+)\")\n",
    "            match = re_page.search(page)\n",
    "            page_arr[i] = match.group(1)+\"/\"\n",
    "        i+=1\n",
    "    #切割完畢\n",
    "    \n",
    "    #整理後之網址放回原DF\n",
    "    behav_min = behav_min.join(pd.DataFrame(page_arr))\n",
    "    \n",
    "    #資料重命名\n",
    "    behav_min.columns = [\"CUST_NO\",\"VISITDATE\",\"month\",\"PAGE\"]\n",
    "    \n",
    "    #篩選超過1萬筆之點擊網址名並紀錄\n",
    "    page_index = behav_min.groupby('PAGE').count()[behav_min.groupby('PAGE').count()[\"VISITDATE\"]>10000].index\n",
    "    \n",
    "    #創建空DF\n",
    "    behav_copy = pd.DataFrame()\n",
    "    \n",
    "    #篩選超過1萬筆之網址\n",
    "    for page in page_index:\n",
    "        behav_copy = behav_copy.append(behav_min[behav_min[\"PAGE\"].str.contains(page)])\n",
    "        \n",
    "    #創建目標欄位\n",
    "    predict_web = pd.DataFrame(index = behav[\"CUST_NO\"].drop_duplicates().reset_index(drop = True))\n",
    "    \n",
    "    #調整行名稱\n",
    "    for page in page_index:\n",
    "        for month in [\"M1\",\"M2\",\"M3\",\"M4\"]:\n",
    "            predict_web[page+\"_\"+month] = 0\n",
    "            \n",
    "    #需跑較久 長資料計算\n",
    "    behav_long = behav_copy.groupby([\"CUST_NO\",\"month\",\"PAGE\"]).count()\n",
    "    \n",
    "    #長寬資料轉換\n",
    "    behav_pivot = behav_long.pivot_table(values = \"VISITDATE\",index = \"CUST_NO\",columns = [\"PAGE\",\"month\"],aggfunc = 'sum')\n",
    "    \n",
    "    #另存後 寬資料行名降階\n",
    "    temp = behav_pivot.copy()\n",
    "    temp.columns = temp.columns.droplevel()\n",
    "    \n",
    "    #目標欄位行名\n",
    "    col = predict_web.columns\n",
    "    \n",
    "    #將資料存入目標欄位\n",
    "    predict_web = pd.DataFrame(temp)\n",
    "    \n",
    "    #行名歸位\n",
    "    predict_web.columns = col\n",
    "    \n",
    "    #將CUST_NO取出\n",
    "    predict_web = predict_web.reset_index()\n",
    "    \n",
    "    \n",
    "    #回傳完成之dataframe\n",
    "    return predict_web\n",
    "    \n",
    "    \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
