{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def web_count4():    \n",
    "    #匯入\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import re\n",
    "    behav = pd.read_csv(\"C:/Users/user/Desktop/competition/TBN_CUST_BEHAVIOR.csv\")\n",
    "    #處理月份\n",
    "    behav[\"month\"] = \"0\"\n",
    "    months = [\"M1\",\"M2\",\"M3\",\"M4\"]\n",
    "    date = [9447,9447+31,9447+61,9447+91,9568]\n",
    "    behav[\"month\"] = pd.cut(behav['VISITDATE'],date,right = False,labels=months)\n",
    "\n",
    "    #正規表示式切割網址\n",
    "    i = 0\n",
    "    page_arr = np.array(behav[\"PAGE\"])\n",
    "    page_min = np.empty(len(behav[\"PAGE\"]),dtype = np.str)\n",
    "    behav_min = behav.copy()\n",
    "    del behav_min[\"PAGE\"]\n",
    "    for page in page_arr:\n",
    "        try:\n",
    "            re_page = re.compile(r\"tw(\\/.+?\\/.+?\\/)\")\n",
    "            match = re_page.search(page)\n",
    "            if (match.group(1)==\"/edrn/pgusordq/\"):\n",
    "                try:\n",
    "                    re_page = re.compile(r\"tw(\\/.+?\\/.+?\\/.+?\\/)\")\n",
    "                    match = re_page.search(page)\n",
    "                    page_arr[i] = match.group(1)\n",
    "                except:\n",
    "                    re_page = re.compile(r\"tw(\\/.+?\\/.+?\\/.+)\")\n",
    "                    match = re_page.search(page)\n",
    "                    page_arr[i] = match.group(1)+\"/\"\n",
    "            else:\n",
    "                page_arr[i] = match.group(1)\n",
    "        except:\n",
    "            re_page = re.compile(r\"tw(\\/.+?\\/.+)\")\n",
    "            match = re_page.search(page)\n",
    "            page_arr[i] = match.group(1)+\"/\"\n",
    "        i+=1\n",
    "    #切割完畢\n",
    "\n",
    "    #整理後之網址放回原DF\n",
    "    behav_min = behav_min.join(pd.DataFrame(page_arr))\n",
    "\n",
    "    #資料重命名\n",
    "    behav_min.columns = [\"CUST_NO\",\"VISITDATE\",\"month\",\"PAGE\"]\n",
    "    #刪除重複資料\n",
    "    behav_min = behav_min[behav_min[\"PAGE\"]!=\"/edrn/pgusordq//\"]\n",
    "    #篩選超過1萬筆之點擊網址名並紀錄\n",
    "    page_index = behav_min.groupby('PAGE').count()[behav_min.groupby('PAGE').count()[\"VISITDATE\"]>10000].index\n",
    "\n",
    "    #創建空DF\n",
    "    behav_copy = pd.DataFrame()\n",
    "    page_index = page_index.drop('/edrn/pgusordq/')\n",
    "    #篩選超過1萬筆之網址\n",
    "    for page in page_index:\n",
    "        behav_copy = behav_copy.append(behav_min[behav_min[\"PAGE\"].str.contains(page)])\n",
    "    behav_copy.append(behav_min[behav_min[\"PAGE\"]=='/edrn/pgusordq/'])\n",
    "    #創建目標欄位\n",
    "    predict_web = pd.DataFrame(index = behav[\"CUST_NO\"].drop_duplicates().reset_index(drop = True))\n",
    "\n",
    "    #區分月份資料\n",
    "    predict_web_M1 = predict_web.copy()\n",
    "    predict_web_M2 = predict_web.copy()\n",
    "    predict_web_M3 = predict_web.copy()\n",
    "    predict_web_M4 = predict_web.copy()\n",
    "\n",
    "    behav_copy_M1 = behav_copy[behav_copy[\"month\"] == \"M1\"]\n",
    "    behav_copy_M2 = behav_copy[behav_copy[\"month\"] == \"M2\"]\n",
    "    behav_copy_M3 = behav_copy[behav_copy[\"month\"] == \"M3\"]\n",
    "    behav_copy_M4 = behav_copy[behav_copy[\"month\"] == \"M4\"]\n",
    "    #調整行名稱\n",
    "\n",
    "\n",
    "    #需跑較久 長資料計算\n",
    "    behav_long_M1 = behav_copy_M1.groupby([\"CUST_NO\",\"PAGE\"]).count()\n",
    "    behav_long_M2 = behav_copy_M2.groupby([\"CUST_NO\",\"PAGE\"]).count()\n",
    "    behav_long_M3 = behav_copy_M3.groupby([\"CUST_NO\",\"PAGE\"]).count()\n",
    "    behav_long_M4 = behav_copy_M4.groupby([\"CUST_NO\",\"PAGE\"]).count()\n",
    "\n",
    "    #長寬資料轉換\n",
    "    behav_pivot_M1 = behav_long_M1.pivot_table(values = \"VISITDATE\",index = \"CUST_NO\",columns = \"PAGE\",aggfunc = 'sum')\n",
    "    behav_pivot_M2 = behav_long_M2.pivot_table(values = \"VISITDATE\",index = \"CUST_NO\",columns = \"PAGE\",aggfunc = 'sum')\n",
    "    behav_pivot_M3 = behav_long_M3.pivot_table(values = \"VISITDATE\",index = \"CUST_NO\",columns = \"PAGE\",aggfunc = 'sum')\n",
    "    behav_pivot_M4 = behav_long_M4.pivot_table(values = \"VISITDATE\",index = \"CUST_NO\",columns = \"PAGE\",aggfunc = 'sum')\n",
    "\n",
    "    for page in page_index:\n",
    "        predict_web_M1[page+\"_\"+\"M1\"] = 0\n",
    "        predict_web_M2[page+\"_\"+\"M2\"] = 0\n",
    "        predict_web_M3[page+\"_\"+\"M3\"] = 0\n",
    "        predict_web_M4[page+\"_\"+\"M4\"] = 0\n",
    "    #M1~M4重複4次\n",
    "    #另存後\n",
    "    temp = behav_pivot_M1.copy()\n",
    "    #目標欄位行名\n",
    "    col = predict_web_M1.columns\n",
    "    #將資料存入目標欄位\n",
    "    predict_web_M1 = pd.DataFrame(temp)\n",
    "    #行名歸位\n",
    "    predict_web_M1.columns = col\n",
    "    #將CUST_NO取出\n",
    "    predict_web_M1 = predict_web_M1.reset_index().fillna(0)\n",
    "\n",
    "    temp = behav_pivot_M2.copy()\n",
    "    col = predict_web_M2.columns\n",
    "    predict_web_M2 = pd.DataFrame(temp)\n",
    "    predict_web_M2.columns = col\n",
    "    predict_web_M2 = predict_web_M2.reset_index().fillna(0)\n",
    "\n",
    "    temp = behav_pivot_M3.copy()  \n",
    "    col = predict_web_M3.columns\n",
    "    predict_web_M3 = pd.DataFrame(temp)\n",
    "    predict_web_M3.columns = col\n",
    "    predict_web_M3 = predict_web_M3.reset_index().fillna(0)\n",
    "\n",
    "    temp = behav_pivot_M4.copy()\n",
    "    col = predict_web_M4.columns\n",
    "    predict_web_M4 = pd.DataFrame(temp)\n",
    "    predict_web_M4.columns = col\n",
    "    predict_web_M4 = predict_web_M4.reset_index().fillna(0)\n",
    "    return predict_web_M1,predict_web_M2,predict_web_M3,predict_web_M4"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
